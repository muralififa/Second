import pandas as pd
import pyodbc
from concurrent.futures import ThreadPoolExecutor, as_completed

# Path to your Excel
excel_file = "connection_hosts.xlsx"

driver = "{ODBC Driver 17 for SQL Server}"   # Ensure installed
default_db = "master"  # fallback database

# Load Excel
df = pd.read_excel(excel_file)

# Ensure Status column exists
if "Status" not in df.columns:
    df["Status"] = ""

def test_connection(index, host_port):
    """Try connecting to a given host/port and return result."""
    if "/" in host_port:
        host, port = host_port.split("/")
    else:
        host = host_port
        port = "1433"

    conn_str = (
        f"DRIVER={driver};"
        f"SERVER={host},{port};"
        f"DATABASE={default_db};"
        "Trusted_Connection=yes;"
        "Encrypt=yes;TrustServerCertificate=no;Connection Timeout=5;"
    )

    try:
        conn = pyodbc.connect(conn_str)
        conn.close()
        return index, "Connected"
    except Exception as e:
        return index, "Not Connected"

# Use ThreadPoolExecutor for parallel connections
results = []
with ThreadPoolExecutor(max_workers=10) as executor:  # adjust workers as needed
    future_to_index = {
        executor.submit(test_connection, index, str(row[0])): index
        for index, row in df.iterrows()
    }
    for future in as_completed(future_to_index):
        index, status = future.result()
        df.at[index, "Status"] = status

# Save results
df.to_excel("connection_hosts_checked.xlsx", index=False)

print("âœ… Completed with multithreading. Results saved in connection_hosts_checked.xlsx")